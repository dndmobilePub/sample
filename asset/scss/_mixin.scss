// ir
@mixin ir-reset($width, $height) {
    position:absolute !important; 
    overflow:hidden !important; 
    height:$height !important; 
    width:$width !important; 
    margin:0 !important; 
    padding:0 !important;
    line-height:0 !important;
    border:0;
}
@mixin ir($ir){
    @if ($ir == "hide") {
        @include ir-reset(1px,1px);
        clip:rect(1px 1px 1px 1px); 
    } @else if($ir == "blind") {
        @include ir-reset(0,0);
        display:block !important; 
        font-size:1px !important; 
        z-index:-1;
    } @else if($ir == "screen") {
        @include ir-reset(0,0);
        font-size:1px; 
        text-indent:-9999px;
    } 
}

@mixin clearfix {
    &:after {
        content: "";
        display: block;
        clear: both;
        height:0;
    }
}
@mixin eff-direction($direction) {
    @if ($direction == left){
        left:0;
        @content;
    } @else if ($direction == right){
        right:0;
        @content;
    } @else if ($direction == center){
        left:50%;
        transform:translateX(-50%);
        @content;
    }
}

@mixin el-content($el-type) {
    @if ($el-type == "after") {
        &::after {
            content: "";
            display: block;
            @content;
        }
    } @else if ($el-type == "before") {
        &::before {
            content: "";
            display: block;
            @content;
        }
    } @else if ($el-type == "both") {
        &::before {
            content: "";
            display: block;
            @content;
        }
        &::after {
            content: "";
            display: block;
            @content;
        }
    }
}

// effect
@mixin transition($el, $time, $effect) {
    transition:$el $time $effect;
    @content;
}

@mixin line-effect($color, $el-type, $direction) {
    backface-visibility:hidden;
	position:relative;
    // transition:0.5s color ease;
	text-decoration:none;
	color:$color;

    @include el-content($el-type) {
        backface-visibility:hidden;
        position:absolute;
        @include eff-direction($direction);
        @content;
    }
}

// width, height
@mixin width ($width:100%) {
    width:$width;
    @content;
}

@mixin height ($height:100%){
    height:$height;
    @content;
}

@mixin el-size ($width, $height) {
    width:$width; 
    height:$height;
    @content;
}
@mixin fullHeight ($height:100vh)  {
    @include height;
    height:$height;
    min-height: $height;
}

// align, position, display, float
@mixin align($type, $offset) {
    @if ($type == "text") {
        text-align:$offset !important;
    } @else if($type == "valign") {
        vertical-align:$offset !important;
    }
}

@mixin pos($type) {position:$type; @content;}
@mixin pos-offset-l($top, $left, $pos:absolute) {position:$pos; top:$top; left:$left; @content;}
@mixin pos-offset-r($top, $right, $pos:absolute) {position:$pos; top:$top; right:$right; @content;}
@mixin pos-offset-b($bottom, $left, $pos:absolute) {position:$pos; bottom:$bottom; left:$left; @content;}
@mixin flex($direction:row, $wrap:nowrap, $j-content:flex-start, $al-items:center) {
    flex-direction:$direction; // row, row-reverse, column, column-reverse
    flex-wrap:$wrap; // nowrap, wrap, wrap-reverse
    justify-content:$j-content; // flex-start, flex-end, center, space-around, space-between, space-evenly
    align-items:$al-items; // stretch, flex-start, flex-end, center
    // align-content:$al-content; // flex-start, flex-end, center, space-around, space-between, space-evenly
    @content;
}

@mixin flexgrow($grow, $shrink, $basis){
    flex-grow:$grow; 
    flex-shrink:$shrink; 
    flex-basis:$basis;
    @content;
}

@mixin flexbox($grow, $shrink, $size){
    flex:$grow $shrink $size;
    @content;
    // $grow :0일 경우 여분의 공간을 차지 하지 않음. 1일 경우 여분의 공간을 차지함
    // $shring : 0일 경우 화면 비율이 변경되도 공간이 줄지 않음. 숫자가 커질수록 공간이 더 많이 줄어듬
    // $size : flex가 적용된 요소의 기본크기를 지정함
}
@mixin display($type) {display:$type; @content;}

// font
@mixin webfont ($fontName, $fontweight) {
    font : {
        family: $fontName;
        weight: $fontweight;
    }
    @content;
}

@mixin fontSize ($size) {
    @if ($size== "xxs") {
        font-size: .9rem;
    } @else if($size== "xs") {
        font-size: 1.2rem;
    } @else if($size== "s") {
        font-size: 1.3rem;
    } @else if($size== "base") {
        font-size: 1.4rem; // default size
    } @else if($size== "md") {
        font-size: 1.6rem;
    } @else if($size== "lg") {
        font-size: 1.8rem;
    } @else if($size== "xl") {
        font-size: 2rem;
    } @else if($size== "xxl") {
        font-size: 2.2rem;
    } @else if($size== "xxxl") {
        font-size: 2.4rem;
    } @else {
        font-size:$size;
    }
    @content;
}

// overflow
@mixin overflow ($offset, $overflow) {
    @if ($offset== x) {
        // overflow:hidden;
        overflow-x:$overflow;
    } @else if ($offset== y) {
        // overflow:hidden;
        overflow-y:$overflow;
    } @else if ($offset== both) {
        overflow:$overflow;
    }
}

// btn
@mixin btn-v($vertical) {
    height: $vertical+ rem;
    line-height: ($vertical - 0.1)+ rem;
}

@mixin btnSize($size, $pad1, $pad2) {
    padding:$pad1+rem $pad2+rem;
    @if ($size == "xs"){
        @include fontSize("xxs");
    } @else if ($size == "s"){
        @include fontSize("xs");
    } @else if ($size == "md"){
        @include fontSize("base");
    } @else if ($size == "lg"){
        @include fontSize("md");
    } @else if ($size == "xl"){
        @include fontSize("lg");
    }
}

@mixin btn($type) {
    border-radius:.3rem;
    &:not(.disabled):not([disabled]):not([aria-disabled="disabled"]):focus {
        box-shadow:0 0 0 0.1rem rgba(0, 0, 0, .1), 0 2px 5px 0.2rem rgba(0, 0, 0, .15);
    }
    &[aria-disabled="disabled"], &[disabled], &.disabled {
        opacity: .5; 
        cursor:not-allowed;
        &:hover, &:focus {
            opacity: .5; box-shadow: none;
        }
    }
    @if ($type == "line") {
        border:1px $color-gray1 solid;
        color:$color-gray1;
        background:$color-white;
        &:not(.disabled):not([disabled]):not([aria-disabled="disabled"]):hover {            
            background:$color-gray3;
            color:$color-white;
            @include transition(.2s, all, ease-in-out);
            @content;
        }
        &:not(.disabled):not([disabled]):not([aria-disabled="disabled"]):focus, &.is-active {
            background:$color-gray3; 
            border-color:$color-gray4;
            color:$color-white;
            @include transition(.2s, all, ease-in-out);
            @content;
        }
        &[aria-disabled="disabled"], &[disabled], &.disabled {
            opacity: .5;
            background:$color-white; 
            border-color:$color-gray1;
            color:$color-gray1;
        }
        @content;
    } @else if ($type == "bg"){ 
        border:1px $color-gray2 solid;       
        background:$color-gray2;
        color:$color-white;
        &:not(.disabled):not([disabled]):not([aria-disabled="disabled"]):hover {            
            background:$color-gray4; 
            border-color:$color-gray4;
            color:$color-gray1;
            @include transition(.2s, all, ease-in-out);
            @content;
        }
        &:not(.disabled):not([disabled]):not([aria-disabled="disabled"]):focus, &.is-active {
            background:$color-gray4; 
            border-color:$color-gray4;
            color:$color-gray1;
            @include transition(.2s, all, ease-in-out);
            @content;
        }
        &[aria-disabled="disabled"], &[disabled], &.disabled {
            opacity: .5;
            color:$color-gray7;
        }
        @content;
    }
}

@mixin border($type, $width, $style, $color) {
    @if ($type == "border") {
        border: $width $style $color
    } @else if ($type == 'outline') {
        outline: $width $style $color
    }
}
// FORM SVG ICON
@function svgIconForm($iconName, $color: 666, $backgroundRepeat: no-repeat) {
    $iconList: (
    no-img:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}' viewBox='0 0 16 16'%3E%3Cpath d='M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0'/%3E%3Cpath d='M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2zm13 1a.5.5 0 0 1 .5.5v6l-3.775-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12v.54L1 12.5v-9a.5.5 0 0 1 .5-.5z'/%3E%3C/svg%3E",
    no-video:"%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23#{$color}'  viewBox='0 0 16 16'%3E%3Cpath d='M6 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0'/%3E%3Cpath d='M9 6a3 3 0 1 1 0-6 3 3 0 0 1 0 6'/%3E%3Cpath d='M9 6h.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 7.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 16H2a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z'/%3E%3C/svg%3E",
    );
    $svgIcon: map-get($iconList, $iconName);
    $backgroundImage: url("data:image/svg+xml;charset=utf8,#{$svgIcon}");
    @return $backgroundImage $backgroundRepeat;
    // @return url("data:image/svg+xml;charset=utf8,#{$svgIcon}");
    //background-image: svgIconForm(check-circle);
    // background-image:svgIconForm(no-img, fff);
}

// gradient
@mixin bg-gradient($type, $angle, $color1, $color2){
    @if ($type == line) {
        background:linear-gradient($angle, $color1, $color2);
        @content;
    } @else if ($type == circle) {
        background:radial-gradient(circle, $color1, $color2);
        @content;
    }
    
}

//text ellipsis
@mixin ellipsis($line: 1, $height) {

    @if ($line == 1) {
        overflow: hidden;
        text-overflow: ellipsis;
        -o-text-overflow:ellipsis;
        -moz-binding:url(ellipsis.xml#ellipsis);
        white-space: nowrap;
        height:$height;
    } @else {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: $line;
        overflow: hidden;
        text-overflow: ellipsis;
        -o-text-overflow:ellipsis;
        -moz-binding:url(ellipsis.xml#ellipsis);
        height:$height;
    }
}

@mixin split($col, $space) {
    width:calc(100%/$col - ($space * ($col - 1)));
}